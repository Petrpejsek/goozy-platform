'use client'

import { useState, useEffect, useRef } from 'react'
import { useRouter } from 'next/navigation'
import Image from 'next/image'
import InfluencerSidebar from '../../../components/InfluencerSidebar'

interface InfluencerData {
  id: string
  name: string
  email: string
  phone?: string
  bio?: string
  avatar?: string
  slug: string
  contentCategories: string[]
  socialNetworks: {
    platform: string
    username: string
    url?: string
  }[]
  profile?: {
    age?: number
    gender?: string
    location?: string
  }
}

export default function ProfilePage() {
  const router = useRouter()
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [message, setMessage] = useState('')
  const [userData, setUserData] = useState<InfluencerData | null>(null)
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    bio: '',
    age: '',
    gender: '',
    location: '',
    instagramUsername: '',
    tiktokUsername: '',
    youtubeChannel: '',
    linkedinUsername: '',
    facebookUsername: '',
    twitterUsername: '',
    contentCategories: [] as string[]
  })
  const [avatarFile, setAvatarFile] = useState<File | null>(null)
  const [avatarPreview, setAvatarPreview] = useState<string>('')
  const [isDragging, setIsDragging] = useState(false)
  const [uploadingAvatar, setUploadingAvatar] = useState(false)
  const [showPasswordModal, setShowPasswordModal] = useState(false)
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  })
  const fileInputRef = useRef<HTMLInputElement>(null)

  const availableCategories = [
    'Fashion', 'Beauty', 'Lifestyle', 'Fitness', 'Food', 
    'Travel', 'Technology', 'Gaming', 'Art', 'Music',
    'Health', 'Parenting', 'Business', 'Education', 'Entertainment'
  ]

  useEffect(() => {
    loadInfluencerData()
  }, [])

  const loadInfluencerData = async () => {
    try {
      // Získat token z localStorage nebo sessionStorage
      const token = localStorage.getItem('influencer_token') || sessionStorage.getItem('influencer_token')
      if (!token) {
        console.log('❌ No authentication token found')
        router.push('/influencer/login')
        return
      }

      const response = await fetch('/api/influencer/me', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })
      
      if (response.ok) {
        const data = await response.json()
        setUserData(data)
        
        // Naplnit formulář
        setFormData({
          name: data.name || '',
          email: data.email || '',
          phone: data.phone || '',
          bio: data.bio || '',
          age: data.profile?.age?.toString() || '',
          gender: data.profile?.gender || '',
          location: data.profile?.location || '',
          instagramUsername: data.socialNetworks?.find((s: any) => s.platform === 'instagram')?.username || '',
          tiktokUsername: data.socialNetworks?.find((s: any) => s.platform === 'tiktok')?.username || '',
          youtubeChannel: data.socialNetworks?.find((s: any) => s.platform === 'youtube')?.username || '',
          linkedinUsername: data.socialNetworks?.find((s: any) => s.platform === 'linkedin')?.username || '',
          facebookUsername: data.socialNetworks?.find((s: any) => s.platform === 'facebook')?.username || '',
          twitterUsername: data.socialNetworks?.find((s: any) => s.platform === 'twitter')?.username || '',
          contentCategories: data.contentCategories?.map((c: any) => c.category) || []
        })
      } else if (response.status === 401) {
        console.log('❌ Authentication failed, redirecting to login')
        localStorage.removeItem('influencer_token')
        localStorage.removeItem('influencer_user')
        sessionStorage.removeItem('influencer_token')
        sessionStorage.removeItem('influencer_user')
        router.push('/influencer/login')
        return
      } else {
        const errorData = await response.json()
        setMessage(errorData.error || 'Failed to load profile data')
      }
    } catch (error) {
      console.error('Error loading influencer data:', error)
      setMessage('Error loading profile data')
    } finally {
      setLoading(false)
    }
  }

  // Avatar functions
  const handleAvatarDrop = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragging(false)
    
    const files = e.dataTransfer.files
    if (files.length > 0) {
      handleAvatarFile(files[0])
    }
  }

  const handleAvatarFile = (file: File) => {
    if (file.type.startsWith('image/')) {
      setAvatarFile(file)
      const reader = new FileReader()
      reader.onload = (e) => {
        setAvatarPreview(e.target?.result as string)
      }
      reader.readAsDataURL(file)
    } else {
      setMessage('Please select an image file')
    }
  }

  const uploadAvatar = async () => {
    if (!avatarFile) return null

    setUploadingAvatar(true)
    try {
      const formData = new FormData()
      formData.append('avatar', avatarFile)

      const token = localStorage.getItem('influencer_token') || sessionStorage.getItem('influencer_token')
      const response = await fetch('/api/influencer/avatar', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: formData
      })

      if (response.ok) {
        const data = await response.json()
        return data.avatarUrl
      } else {
        throw new Error('Failed to upload avatar')
      }
    } catch (error) {
      console.error('Avatar upload error:', error)
      setMessage('Failed to upload avatar')
      return null
    } finally {
      setUploadingAvatar(false)
    }
  }

  // Password change function
  const handlePasswordChange = async () => {
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      setMessage('New passwords do not match')
      return
    }

    if (passwordData.newPassword.length < 6) {
      setMessage('New password must be at least 6 characters')
      return
    }

    try {
      const token = localStorage.getItem('influencer_token') || sessionStorage.getItem('influencer_token')
      const response = await fetch('/api/influencer/change-password', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          currentPassword: passwordData.currentPassword,
          newPassword: passwordData.newPassword
        })
      })

      if (response.ok) {
        setMessage('Password changed successfully!')
        setShowPasswordModal(false)
        setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' })
      } else {
        const error = await response.json()
        setMessage(error.message || 'Failed to change password')
      }
    } catch (error) {
      setMessage('Error changing password')
    }
  }

  const handleSave = async () => {
    setSaving(true)
    setMessage('')
    
    try {
      // Získat token
      const token = localStorage.getItem('influencer_token') || sessionStorage.getItem('influencer_token')
      if (!token) {
        setMessage('Authentication token not found. Please log in again.')
        router.push('/influencer/login')
        return
      }

      // Upload avatar if changed
      let avatarUrl = null
      if (avatarFile) {
        avatarUrl = await uploadAvatar()
        if (!avatarUrl) {
          return // Error message already set in uploadAvatar
        }
      }

      const response = await fetch('/api/influencer/profile', {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: formData.name,
          phone: formData.phone,
          bio: formData.bio,
          avatar: avatarUrl,
          profile: {
            age: formData.age ? parseInt(formData.age) : null,
            gender: formData.gender || null,
            location: formData.location || null
          },
          socialNetworks: [
            ...(formData.instagramUsername ? [{
              platform: 'instagram',
              username: formData.instagramUsername,
              url: `https://instagram.com/${formData.instagramUsername}`
            }] : []),
            ...(formData.tiktokUsername ? [{
              platform: 'tiktok',
              username: formData.tiktokUsername,
              url: `https://tiktok.com/@${formData.tiktokUsername}`
            }] : []),
            ...(formData.youtubeChannel ? [{
              platform: 'youtube',
              username: formData.youtubeChannel,
              url: `https://youtube.com/@${formData.youtubeChannel}`
            }] : []),
            ...(formData.linkedinUsername ? [{
              platform: 'linkedin',
              username: formData.linkedinUsername,
              url: `https://linkedin.com/in/${formData.linkedinUsername}`
            }] : []),
            ...(formData.facebookUsername ? [{
              platform: 'facebook',
              username: formData.facebookUsername,
              url: `https://facebook.com/${formData.facebookUsername}`
            }] : []),
            ...(formData.twitterUsername ? [{
              platform: 'twitter',
              username: formData.twitterUsername,
              url: `https://twitter.com/${formData.twitterUsername}`
            }] : [])
          ],
          contentCategories: formData.contentCategories
        })
      })

      if (response.ok) {
        setMessage('Profile updated successfully!')
        setTimeout(() => setMessage(''), 3000)
        loadInfluencerData() // Refresh data
      } else {
        const error = await response.json()
        setMessage(error.message || 'Error updating profile')
      }
    } catch (error) {
      console.error('Error saving profile:', error)
      setMessage('Error saving profile')
    } finally {
      setSaving(false)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-black mx-auto mb-4"></div>
          <p className="text-gray-600">Loading profile...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <InfluencerSidebar currentPage="profile" />
      
      {/* Header */}
      <header className="bg-white border-b border-gray-100 h-16 fixed top-0 right-0 left-64 z-30">
        <div className="flex items-center justify-between h-full px-8">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">Profile Settings</h2>
            <p className="text-sm text-gray-500">Manage your personal information and preferences</p>
          </div>
          
          <button 
            onClick={handleSave}
            disabled={saving}
            className="bg-black text-white px-6 py-2.5 rounded-lg font-medium hover:bg-gray-800 transition-colors disabled:opacity-50"
          >
            {saving ? 'Saving...' : 'Save Changes'}
          </button>
        </div>
      </header>
      
      {/* Message */}
      {message && (
        <div className={`ml-64 mt-16 mx-8 p-4 rounded-lg ${
          message.includes('successfully') ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'
        }`}>
          {message}
        </div>
      )}
      
      {/* Main Content */}
      <main className="ml-64 pt-24 p-8">
        <div className="max-w-4xl space-y-8">
          
          {/* Profile Overview with Avatar Upload */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <div className="flex items-center space-x-6 mb-6">
              {/* Avatar Upload Area */}
              <div className="relative">
                <div
                  className={`w-24 h-24 rounded-full border-2 border-dashed border-gray-300 flex items-center justify-center cursor-pointer hover:border-blue-400 transition-colors ${
                    isDragging ? 'border-blue-500 bg-blue-50' : ''
                  }`}
                  onDrop={handleAvatarDrop}
                  onDragOver={(e) => {
                    e.preventDefault()
                    setIsDragging(true)
                  }}
                  onDragLeave={() => setIsDragging(false)}
                  onClick={() => fileInputRef.current?.click()}
                >
                  {avatarPreview || userData?.avatar ? (
                    <Image
                      src={avatarPreview || userData?.avatar || ''}
                      alt="Avatar"
                      width={96}
                      height={96}
                      className="w-24 h-24 rounded-full object-cover"
                    />
                  ) : (
                    <div className="text-center">
                      <div className="w-8 h-8 mx-auto mb-1 text-gray-400">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                      </div>
                      <p className="text-xs text-gray-500">Upload</p>
                    </div>
                  )}
                  {uploadingAvatar && (
                    <div className="absolute inset-0 bg-black bg-opacity-50 rounded-full flex items-center justify-center">
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                    </div>
                  )}
                </div>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  onChange={(e) => {
                    const file = e.target.files?.[0]
                    if (file) handleAvatarFile(file)
                  }}
                  className="hidden"
                />
                <p className="text-xs text-gray-500 mt-2 text-center max-w-20">
                  Drag & drop or click
                </p>
              </div>
              
              <div>
                <h3 className="text-xl font-semibold text-gray-900">{userData?.name}</h3>
                <p className="text-gray-500">@{userData?.slug}</p>
                <p className="text-sm text-gray-400">{userData?.email}</p>
                <p className="text-xs text-gray-500 mt-2">
                  Upload a new avatar by dragging an image or clicking the upload area
                </p>
              </div>
            </div>
          </div>

          {/* Personal Information */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">Personal Information</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="Enter your full name"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                <input
                  type="email"
                  value={formData.email}
                  readOnly
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-500"
                  placeholder="Email cannot be changed"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Phone</label>
                <input
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => setFormData({...formData, phone: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="Enter your phone number"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Age</label>
                <input
                  type="number"
                  value={formData.age}
                  onChange={(e) => setFormData({...formData, age: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="Enter your age"
                  min="13"
                  max="100"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Gender</label>
                <select
                  value={formData.gender}
                  onChange={(e) => setFormData({...formData, gender: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                >
                  <option value="">Select gender</option>
                  <option value="female">Female</option>
                  <option value="male">Male</option>
                  <option value="other">Other</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Location</label>
                <input
                  type="text"
                  value={formData.location}
                  onChange={(e) => setFormData({...formData, location: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="City, Country"
                />
              </div>
            </div>
            
            <div className="mt-6">
              <label className="block text-sm font-medium text-gray-700 mb-2">Bio</label>
              <textarea
                value={formData.bio}
                onChange={(e) => setFormData({...formData, bio: e.target.value})}
                rows={4}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                placeholder="Tell us about yourself..."
                maxLength={500}
              />
              <p className="text-sm text-gray-500 mt-1">{formData.bio.length}/500 characters</p>
            </div>
          </div>

          {/* Social Media */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">Social Media</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Instagram Username</label>
                <div className="flex">
                  <span className="inline-flex items-center px-3 rounded-l-lg border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                    @
                  </span>
                  <input
                    type="text"
                    value={formData.instagramUsername}
                    onChange={(e) => setFormData({...formData, instagramUsername: e.target.value})}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-black"
                    placeholder="username"
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">TikTok Username</label>
                <div className="flex">
                  <span className="inline-flex items-center px-3 rounded-l-lg border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                    @
                  </span>
                  <input
                    type="text"
                    value={formData.tiktokUsername}
                    onChange={(e) => setFormData({...formData, tiktokUsername: e.target.value})}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-black"
                    placeholder="username"
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">YouTube Channel</label>
                <div className="flex">
                  <span className="inline-flex items-center px-3 rounded-l-lg border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                    @
                  </span>
                  <input
                    type="text"
                    value={formData.youtubeChannel}
                    onChange={(e) => setFormData({...formData, youtubeChannel: e.target.value})}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-black"
                    placeholder="channel"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">LinkedIn Username</label>
                <div className="flex">
                  <span className="inline-flex items-center px-3 rounded-l-lg border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                    in/
                  </span>
                  <input
                    type="text"
                    value={formData.linkedinUsername}
                    onChange={(e) => setFormData({...formData, linkedinUsername: e.target.value})}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-black"
                    placeholder="username"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Facebook Username</label>
                <div className="flex">
                  <span className="inline-flex items-center px-3 rounded-l-lg border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                    @
                  </span>
                  <input
                    type="text"
                    value={formData.facebookUsername}
                    onChange={(e) => setFormData({...formData, facebookUsername: e.target.value})}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-black"
                    placeholder="username"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Twitter Username</label>
                <div className="flex">
                  <span className="inline-flex items-center px-3 rounded-l-lg border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm">
                    @
                  </span>
                  <input
                    type="text"
                    value={formData.twitterUsername}
                    onChange={(e) => setFormData({...formData, twitterUsername: e.target.value})}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-black"
                    placeholder="username"
                  />
                </div>
              </div>
            </div>
          </div>

          {/* Content Categories */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">Content Categories</h3>
            <p className="text-sm text-gray-600 mb-4">Select all categories that match your content style</p>
            
            <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
              {availableCategories.map((category) => (
                <label key={category} className="flex items-center p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={formData.contentCategories.includes(category)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        setFormData({
                          ...formData,
                          contentCategories: [...formData.contentCategories, category]
                        })
                      } else {
                        setFormData({
                          ...formData,
                          contentCategories: formData.contentCategories.filter(c => c !== category)
                        })
                      }
                    }}
                    className="mr-3 rounded text-black focus:ring-black"
                  />
                  <span className="text-sm font-medium">{category}</span>
                </label>
              ))}
            </div>
            
            <p className="text-sm text-gray-500 mt-4">
              Selected: {formData.contentCategories.length} categories
            </p>
          </div>

          {/* Account Settings */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-6">Account Settings</h3>
            
            <div className="space-y-4">
              <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                <div>
                  <h4 className="font-medium text-gray-900">Change Password</h4>
                  <p className="text-sm text-gray-500">Update your account password</p>
                </div>
                <button 
                  onClick={() => setShowPasswordModal(true)}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 font-medium transition-colors"
                >
                  Change Password
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Password Change Modal */}
      {showPasswordModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 w-full max-w-md mx-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Change Password</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Current Password</label>
                <input
                  type="password"
                  value={passwordData.currentPassword}
                  onChange={(e) => setPasswordData({...passwordData, currentPassword: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="Enter current password"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">New Password</label>
                <input
                  type="password"
                  value={passwordData.newPassword}
                  onChange={(e) => setPasswordData({...passwordData, newPassword: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="Enter new password"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Confirm New Password</label>
                <input
                  type="password"
                  value={passwordData.confirmPassword}
                  onChange={(e) => setPasswordData({...passwordData, confirmPassword: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="Confirm new password"
                />
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => {
                  setShowPasswordModal(false)
                  setPasswordData({ currentPassword: '', newPassword: '', confirmPassword: '' })
                }}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 font-medium"
              >
                Cancel
              </button>
              <button
                onClick={handlePasswordChange}
                className="bg-black text-white px-4 py-2 rounded-lg hover:bg-gray-800 font-medium transition-colors"
              >
                Change Password
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
} 