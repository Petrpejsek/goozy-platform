import { prisma } from '../prisma'

// Regex pro nalezen√≠ emailu v textu - pokroƒçilej≈°√≠ verze
const EMAIL_PATTERNS = [
  // Z√°kladn√≠ email regex
  /\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g,
  // Email s emoji nebo speci√°ln√≠mi znaky kolem
  /[üíåüìßüì©‚úâÔ∏è]?\s*([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,})/g,
  // Email v z√°vork√°ch nebo s dvojteƒçkou
  /(?:email|mail|contact)[:\s]*([A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,})/gi
]

/**
 * Extrahuje email z textu pomoc√≠ r≈Øzn√Ωch vzor≈Ø
 */
export function extractEmailFromText(text: string): string | null {
  if (!text) return null
  
  for (const pattern of EMAIL_PATTERNS) {
    const matches = text.match(pattern)
    if (matches && matches.length > 0) {
      // Vyƒçisti email od emoji a dal≈°√≠ch znak≈Ø
      const cleanEmail = matches[0].replace(/[üíåüìßüì©‚úâÔ∏è\s]/g, '').toLowerCase()
      
      // Validuj ≈æe je to skuteƒçnƒõ email
      if (isValidEmail(cleanEmail)) {
        return cleanEmail
      }
    }
  }
  
  return null
}

/**
 * Z√°kladn√≠ validace emailu
 */
function isValidEmail(email: string): boolean {
  const basicEmailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return basicEmailRegex.test(email)
}

/**
 * Automaticky extrahuje emaily z bio pol√≠ pro v≈°echny prospects
 */
export async function autoExtractEmailsFromBio(): Promise<{
  processed: number
  updated: number
  extracted: Array<{ name: string, email: string }>
}> {
  try {
    console.log('üîç [EMAIL-EXTRACTOR] Spou≈°t√≠m automatickou extrakci email≈Ø z bio pol√≠...')
    
    // Najdi prospects s bio ale bez emailu
    const prospects = await prisma.influencerProspect.findMany({
      where: {
        AND: [
          { email: null },
          { bio: { not: null } },
          { bio: { not: '' } }
        ]
      }
    })
    
    console.log(`üìä [EMAIL-EXTRACTOR] Nalezeno ${prospects.length} prospects k zpracov√°n√≠`)
    
    const result = {
      processed: prospects.length,
      updated: 0,
      extracted: [] as Array<{ name: string, email: string }>
    }
    
    for (const prospect of prospects) {
      const extractedEmail = extractEmailFromText(prospect.bio!)
      
      if (extractedEmail) {
        console.log(`‚úâÔ∏è  [EMAIL-EXTRACTOR] ${prospect.name}: ${extractedEmail}`)
        
        // Aktualizuj prospect
        await prisma.influencerProspect.update({
          where: { id: prospect.id },
          data: { email: extractedEmail }
        })
        
        result.updated++
        result.extracted.push({
          name: prospect.name,
          email: extractedEmail
        })
      }
    }
    
    console.log(`‚úÖ [EMAIL-EXTRACTOR] Dokonƒçeno: ${result.updated}/${result.processed} prospects aktualizov√°no`)
    
    return result
    
  } catch (error) {
    console.error('‚ùå [EMAIL-EXTRACTOR] Chyba p≈ôi extrakci email≈Ø:', error)
    throw error
  }
}

/**
 * Extrahuje email z konkr√©tn√≠ho bio p≈ôi scraping
 */
export function extractEmailFromScrapedBio(scrapedBio: string): string | null {
  return extractEmailFromText(scrapedBio)
} 