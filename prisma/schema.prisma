// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models (keep if they exist)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  orders    Order[]
  
  @@map("users")
}

model Campaign {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  status      String   @default("active") // active, inactive, draft
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Campaign specific fields
  startDate   DateTime?
  endDate     DateTime?
  targetGoal  Int?
  metadata    Json?
  
  // Relations
  orders      Order[]
  products    Product[]
  
  @@map("campaigns")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  currency    String   @default("EUR")
  supplier    String
  image       String?
  status      String   @default("active") // active, inactive, out_of_stock
  stockCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaignId  String?
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  orderItems  OrderItem[]
  
  @@map("products")
}

// New e-commerce models
model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique
  status          String   @default("pending") // pending, processing, shipped, delivered, cancelled
  
  // Payment information
  paymentIntentId String?
  paymentStatus   String   @default("pending") // pending, paid, failed, refunded
  
  // Amounts (in cents to avoid floating point issues)
  subtotal        Int      // Amount in cents
  shippingCost    Int      // Amount in cents  
  taxAmount       Int      // Amount in cents
  totalAmount     Int      // Amount in cents
  currency        String   @default("EUR")
  
  // Addresses (stored as JSON for flexibility)
  billingAddress  Json
  shippingAddress Json
  
  // Shipping
  shippingMethod  String
  trackingNumber  String?
  estimatedDelivery DateTime?
  
  // Campaign relation
  campaignSlug    String?
  campaign        Campaign? @relation(fields: [campaignSlug], references: [slug])
  appliedCampaigns String[] // Array of campaign slugs
  
  // User relation (optional for guest checkout)
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])
  customerEmail   String    // Always store email for order tracking
  
  // Metadata
  metadata        Json?     // Store additional order data
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  items           OrderItem[]
  payments        Payment[]
  shipments       Shipment[]
  
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // Product information (snapshot at time of order)
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  
  // Product details (stored for historical accuracy)
  name        String
  description String?
  price       Int      // Price in cents at time of order
  quantity    Int
  supplier    String
  image       String?
  
  // Supplier specific data
  supplierOrderId String?  // ID from supplier system
  supplierStatus  String?  // Status from supplier
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("order_items")
}

model Payment {
  id              String   @id @default(cuid())
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // Payment details
  paymentIntentId String   @unique
  amount          Int      // Amount in cents
  currency        String   @default("EUR")
  status          String   // pending, succeeded, failed, cancelled
  paymentMethod   String?  // card, apple_pay, google_pay, etc.
  
  // Stripe specific
  stripeClientSecret String?
  stripePaymentMethodId String?
  
  // Transaction details
  transactionId   String?
  gatewayResponse Json?    // Full response from payment gateway
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  paidAt          DateTime?
  
  @@map("payments")
}

model Shipment {
  id              String   @id @default(cuid())
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // Shipping details
  supplier        String
  trackingNumber  String?
  carrier         String?
  status          String   @default("pending") // pending, shipped, in_transit, delivered, returned
  
  // Shipping address (can be different per supplier)
  shippingAddress Json
  
  // Cost breakdown
  shippingCost    Int      // Cost in cents
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  // Relations
  items           ShipmentItem[]
  
  @@map("shipments")
}

model ShipmentItem {
  id          String   @id @default(cuid())
  shipmentId  String
  shipment    Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  
  // Product reference
  orderItemId String   // Reference to the original order item
  productId   String
  name        String
  quantity    Int
  
  createdAt   DateTime @default(now())
  
  @@map("shipment_items")
}

// Analytics and tracking
model OrderEvent {
  id        String   @id @default(cuid())
  orderId   String
  type      String   // order_created, payment_completed, shipped, delivered, etc.
  data      Json?    // Event specific data
  createdAt DateTime @default(now())
  
  @@map("order_events")
}

// Configuration tables
model ShippingRate {
  id          String   @id @default(cuid())
  supplier    String
  country     String
  rate        Int      // Rate in cents
  isEU        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([supplier, country])
  @@map("shipping_rates")
}

model TaxRate {
  id        String   @id @default(cuid())
  country   String   @unique
  rate      Float    // VAT rate as decimal (0.21 for 21%)
  isEU      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("tax_rates")
}

// Supplier and Brand models
model Brand {
  id          String   @id @default(cuid())
  name        String
  email       String
  website     String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  suppliers   Supplier[]
  
  @@map("brands")
}

model Supplier {
  id          String   @id @default(cuid())
  brandId     String
  name        String
  email       String
  phone       String?
  website     String?
  description String?
  isActive    Boolean  @default(true)
  
  // Shipping API Settings
  shipping_api_endpoint String?
  shipping_api_key     String?
  has_shipping_api     Boolean @default(false)
  
  // Manual Shipping Settings
  shipping_flat_rate      Float?
  shipping_free_threshold Float?
  shipping_regions        Json?
  shipping_rules          Json?
  
  // Return Policy
  return_policy_days       Int?
  return_policy_conditions String?
  return_policy_cost       String?
  return_address           String?
  return_instructions      String?
  
  // Other settings
  currency      String  @default("EUR")
  vat_included  Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  brands Brand @relation(fields: [brandId], references: [id])
  
  @@map("suppliers")
}
